from collections import deque
from datetime import datetime, time, timedelta

class Query:
    def __init__(self, name, query_type, arrival_time):
        self.name = name
        self.query_type = query_type
        self.arrival_time = arrival_time
        self.start_time = None
        self.end_time = None
        self.processing_time = None

def handle_queries(queries, time_limit, time_slice):
    faculty_queue = deque()
    student_queue = deque()

    # Separate the queries based on their type
    for query in queries:
        if query.query_type == 'faculty':
            faculty_queue.append(query)
        elif query.query_type == 'student':
            student_queue.append(query)

    # Set the start time for handling queries
    current_time = datetime.combine(datetime.today(), time(hour=10))

    while current_time.time() < time(hour=12):
        # Handle faculty queries first, then student queries
        if faculty_queue:
            query = faculty_queue.popleft()
        elif student_queue:
            query = student_queue.popleft()
        else:
            break

        # Set the start time and end time for the query
        query.start_time = current_time
        query.end_time = min(current_time + timedelta(minutes=time_slice), datetime.combine(datetime.today(), time(hour=12)))

        # Update the current time and processing time for the query
        current_time = query.end_time
        query.processing_time = query.end_time - query.start_time

        # Print the details of the query
        print(f"{query.name} ({query.query_type}) started at {query.start_time.strftime('%H:%M:%S')}, ended at {query.end_time.strftime('%H:%M:%S')}, processed for {query.processing_time.total_seconds()} seconds")

    # Calculate the total time spent and average query time
    total_time = sum(query.processing_time.total_seconds() for query in queries)
    average_time = total_time / len(queries)

    print(f"Total time spent on handling queries: {total_time} seconds")
    print(f"Average query time: {average_time} seconds")

# Example usage
queries = [
    Query("John Doe", "faculty", datetime.now()),
    Query("Jane Smith", "student", datetime.now() + timedelta(minutes=5)),
    Query("Bob Johnson", "faculty", datetime.now() + timedelta(minutes=10)),
    Query("Sarah Lee", "student", datetime.now() + timedelta(minutes=15)),
    Query("Tom Wilson", "student", datetime.now() + timedelta(minutes=20))
]

handle_queries(queries, time_limit=time(hour=12), time_slice=10)

